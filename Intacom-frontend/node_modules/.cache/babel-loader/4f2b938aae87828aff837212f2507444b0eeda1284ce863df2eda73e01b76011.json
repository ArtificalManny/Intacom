{"ast":null,"code":"// src/store/slices/postsSlice.ts\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  posts: [],\n  loading: false,\n  error: null\n};\n\n// Async Thunks\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async (projectId, thunkAPI) => {\n  try {\n    const response = await axios.get(`/projects/${projectId}/posts`);\n    return response.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data.error);\n  }\n});\nexport const createPost = createAsyncThunk('posts/createPost', async ({\n  projectId,\n  formData\n}, thunkAPI) => {\n  try {\n    const state = thunkAPI.getState();\n    const response = await axios.post(`/projects/${projectId}/posts`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        Authorization: `Bearer ${state.auth.token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data.error);\n  }\n});\nexport const likePost = createAsyncThunk('posts/likePost', async ({\n  type,\n  postId,\n  projectId\n}, thunkAPI) => {\n  try {\n    let url = '';\n    if (type === 'project' && projectId) {\n      url = `/projects/${projectId}/posts/${postId}/like`;\n    } else if (type === 'global') {\n      url = `/posts/global/${postId}/like`;\n    }\n    const state = thunkAPI.getState();\n    const response = await axios.post(url, {}, {\n      headers: {\n        Authorization: `Bearer ${state.auth.token}`\n      }\n    });\n    return {\n      type,\n      postId\n    };\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data.error);\n  }\n});\nexport const addComment = createAsyncThunk('posts/addComment', async ({\n  type,\n  postId,\n  content,\n  projectId\n}, thunkAPI) => {\n  try {\n    let url = '';\n    if (type === 'project' && projectId) {\n      url = `/projects/${projectId}/posts/${postId}/comment`;\n    } else if (type === 'global') {\n      url = `/posts/global/${postId}/comment`;\n    }\n    const state = thunkAPI.getState();\n    const response = await axios.post(url, {\n      content\n    }, {\n      headers: {\n        Authorization: `Bearer ${state.auth.token}`\n      }\n    });\n    return {\n      type,\n      postId,\n      comment: response.data\n    };\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data.error);\n  }\n});\n\n// Slice\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    addPost(state, action) {\n      state.posts.unshift(action.payload);\n    },\n    addGlobalPost(state, action) {\n      state.posts.unshift(action.payload);\n    },\n    addCommentToPost(state, action) {\n      const {\n        postId,\n        comment\n      } = action.payload;\n      const post = state.posts.find(p => p.id === postId);\n      if (post) {\n        post.comments.push(comment);\n      }\n    },\n    likePostInState(state, action) {\n      const {\n        postId\n      } = action.payload;\n      const post = state.posts.find(p => p.id === postId);\n      if (post) {\n        post.likes.push({\n          id: 'new_like_id',\n          // Replace with actual ID\n          user: {\n            id: 'current_user_id',\n            // Replace with actual user ID\n            name: 'Current User',\n            profilePicture: 'path_to_profile_pic'\n          },\n          createdAt: new Date().toISOString()\n        });\n      }\n    }\n  },\n  extraReducers: builder => {\n    // Fetch Posts\n    builder.addCase(fetchPosts.pending, state => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(fetchPosts.fulfilled, (state, action) => {\n      state.loading = false;\n      state.posts = action.payload;\n    });\n    builder.addCase(fetchPosts.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n    // Create Post\n    builder.addCase(createPost.pending, state => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(createPost.fulfilled, (state, action) => {\n      state.loading = false;\n      state.posts.unshift(action.payload);\n    });\n    builder.addCase(createPost.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n    // Like Post\n    builder.addCase(likePost.fulfilled, (state, action) => {\n      // Optionally update state\n    });\n    builder.addCase(likePost.rejected, (state, action) => {\n      state.error = action.payload;\n    });\n    // Add Comment\n    builder.addCase(addComment.fulfilled, (state, action) => {\n      const {\n        postId,\n        comment\n      } = action.payload;\n      const post = state.posts.find(p => p.id === postId);\n      if (post) {\n        post.comments.push(comment);\n      }\n    });\n    builder.addCase(addComment.rejected, (state, action) => {\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  addPost,\n  addGlobalPost,\n  addCommentToPost,\n  likePostInState\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","posts","loading","error","fetchPosts","projectId","thunkAPI","response","get","data","rejectWithValue","createPost","formData","state","getState","post","headers","Authorization","auth","token","likePost","type","postId","url","addComment","content","comment","postsSlice","name","reducers","addPost","action","unshift","payload","addGlobalPost","addCommentToPost","find","p","id","comments","push","likePostInState","likes","user","profilePicture","createdAt","Date","toISOString","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["/Users/artificalmanny/Portfolio/Intacom/Intacom/Intacom-frontend/src/store/slices/postsSlice.ts"],"sourcesContent":["// src/store/slices/postsSlice.ts\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { RootState } from '../index';\n\ninterface Media {\n  image?: string;\n  video?: string;\n  audio?: string;\n}\n\ninterface Comment {\n  id: string;\n  user: {\n    id: string;\n    name: string;\n    profilePicture?: string;\n  };\n  content: string;\n  createdAt: string;\n}\n\ninterface Like {\n  id: string;\n  user: {\n    id: string;\n    name: string;\n    profilePicture?: string;\n  };\n  createdAt: string;\n}\n\ninterface Post {\n  id: string;\n  project: string;\n  user: {\n    id: string;\n    email: string;\n    name: string;\n    profilePicture?: string;\n  };\n  content: string;\n  mediaImage?: string;\n  mediaVideo?: string;\n  mediaAudio?: string;\n  comments: Comment[];\n  likes: Like[];\n  createdAt: string;\n}\n\ninterface PostsState {\n  posts: Post[];\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: PostsState = {\n  posts: [],\n  loading: false,\n  error: null,\n};\n\n// Async Thunks\nexport const fetchPosts = createAsyncThunk(\n  'posts/fetchPosts',\n  async (projectId: string, thunkAPI) => {\n    try {\n      const response = await axios.get(`/projects/${projectId}/posts`);\n      return response.data;\n    } catch (error: any) {\n      return thunkAPI.rejectWithValue(error.response.data.error);\n    }\n  }\n);\n\nexport const createPost = createAsyncThunk(\n  'posts/createPost',\n  async ({ projectId, formData }: { projectId: string; formData: FormData }, thunkAPI) => {\n    try {\n      const state = thunkAPI.getState() as RootState;\n      const response = await axios.post(`/projects/${projectId}/posts`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          Authorization: `Bearer ${state.auth.token}`,\n        },\n      });\n      return response.data;\n    } catch (error: any) {\n      return thunkAPI.rejectWithValue(error.response.data.error);\n    }\n  }\n);\n\nexport const likePost = createAsyncThunk(\n  'posts/likePost',\n  async ({ type, postId, projectId }: { type: string; postId: string; projectId?: string }, thunkAPI) => {\n    try {\n      let url = '';\n      if (type === 'project' && projectId) {\n        url = `/projects/${projectId}/posts/${postId}/like`;\n      } else if (type === 'global') {\n        url = `/posts/global/${postId}/like`;\n      }\n      const state = thunkAPI.getState() as RootState;\n      const response = await axios.post(url, {}, {\n        headers: {\n          Authorization: `Bearer ${state.auth.token}`,\n        },\n      });\n      return { type, postId };\n    } catch (error: any) {\n      return thunkAPI.rejectWithValue(error.response.data.error);\n    }\n  }\n);\n\nexport const addComment = createAsyncThunk(\n  'posts/addComment',\n  async ({ type, postId, content, projectId }: { type: string; postId: string; content: string; projectId?: string }, thunkAPI) => {\n    try {\n      let url = '';\n      if (type === 'project' && projectId) {\n        url = `/projects/${projectId}/posts/${postId}/comment`;\n      } else if (type === 'global') {\n        url = `/posts/global/${postId}/comment`;\n      }\n      const state = thunkAPI.getState() as RootState;\n      const response = await axios.post(url, { content }, {\n        headers: {\n          Authorization: `Bearer ${state.auth.token}`,\n        },\n      });\n      return { type, postId, comment: response.data };\n    } catch (error: any) {\n      return thunkAPI.rejectWithValue(error.response.data.error);\n    }\n  }\n);\n\n// Slice\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    addPost(state, action) {\n      state.posts.unshift(action.payload);\n    },\n    addGlobalPost(state, action) {\n      state.posts.unshift(action.payload);\n    },\n    addCommentToPost(state, action) {\n      const { postId, comment } = action.payload;\n      const post = state.posts.find(p => p.id === postId);\n      if (post) {\n        post.comments.push(comment);\n      }\n    },\n    likePostInState(state, action) {\n      const { postId } = action.payload;\n      const post = state.posts.find(p => p.id === postId);\n      if (post) {\n        post.likes.push({\n          id: 'new_like_id', // Replace with actual ID\n          user: {\n            id: 'current_user_id', // Replace with actual user ID\n            name: 'Current User',\n            profilePicture: 'path_to_profile_pic',\n          },\n          createdAt: new Date().toISOString(),\n        });\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    // Fetch Posts\n    builder.addCase(fetchPosts.pending, (state) => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(fetchPosts.fulfilled, (state, action) => {\n      state.loading = false;\n      state.posts = action.payload;\n    });\n    builder.addCase(fetchPosts.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload as string;\n    });\n    // Create Post\n    builder.addCase(createPost.pending, (state) => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(createPost.fulfilled, (state, action) => {\n      state.loading = false;\n      state.posts.unshift(action.payload);\n    });\n    builder.addCase(createPost.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload as string;\n    });\n    // Like Post\n    builder.addCase(likePost.fulfilled, (state, action) => {\n      // Optionally update state\n    });\n    builder.addCase(likePost.rejected, (state, action) => {\n      state.error = action.payload as string;\n    });\n    // Add Comment\n    builder.addCase(addComment.fulfilled, (state, action) => {\n      const { postId, comment } = action.payload;\n      const post = state.posts.find(p => p.id === postId);\n      if (post) {\n        post.comments.push(comment);\n      }\n    });\n    builder.addCase(addComment.rejected, (state, action) => {\n      state.error = action.payload as string;\n    });\n  },\n});\n\nexport const { addPost, addGlobalPost, addCommentToPost, likePostInState } = postsSlice.actions;\nexport default postsSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}